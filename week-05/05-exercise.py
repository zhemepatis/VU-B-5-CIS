# 2. Feistel cipher with three iterations, where the keys are [45, 108, 192]
# Iteration function is (m|k)^((m//16)&k) 
# Initialization vector is [153, 12]
# Decipher cipher made using CBC mode:
# [[73, 169], [36, 26], [253, 51], [2, 149], [84, 36], [173, 21], [112, 161], [12, 16], [217, 62], [41, 141], [122, 40], [128, 22], [79, 165], [39, 10], [229, 63], [7, 156], [72, 61], [182, 11], [110, 180], [25, 29], [199, 32], [49, 135], [113, 52], [143, 28], [70, 169], [51, 18], [247, 58], [6, 137], [64, 53], [162, 12], [101, 163], [12, 4], [211, 42], [48, 139], [117, 60], [131, 20], [83, 190], [46, 13], [246, 35], [12, 154], [84, 33], [164, 18], [111, 161], [15, 2], [198, 43], [42, 145], [102, 37], [128, 4], [72, 164], [45, 22], [228, 41], [0, 155], [94, 54], [177, 2], [115, 178], [6, 23], [222, 49], [54, 158], [123, 44], [143, 12], [69, 162], [54, 17], [243, 48], [11, 146]]

import utils.feistel_scheme as fs

keys = [45, 108, 192]
initialisation_vector = [153, 12]
byte_pairs = [[73, 169], [36, 26], [253, 51], [2, 149], [84, 36], [173, 21], [112, 161], [12, 16], [217, 62], [41, 141], [122, 40], [128, 22], [79, 165], [39, 10], [229, 63], [7, 156], [72, 61], [182, 11], [110, 180], [25, 29], [199, 32], [49, 135], [113, 52], [143, 28], [70, 169], [51, 18], [247, 58], [6, 137], [64, 53], [162, 12], [101, 163], [12, 4], [211, 42], [48, 139], [117, 60], [131, 20], [83, 190], [46, 13], [246, 35], [12, 154], [84, 33], [164, 18], [111, 161], [15, 2], [198, 43], [42, 145], [102, 37], [128, 4], [72, 164], [45, 22], [228, 41], [0, 155], [94, 54], [177, 2], [115, 178], [6, 23], [222, 49], [54, 158], [123, 44], [143, 12], [69, 162], [54, 17], [243, 48], [11, 146]]
func = "(r | key) ^ ((r//16) & key) "

result_str = ""
for pair in byte_pairs:
    l_result, r_result = fs.decrypt_cbc(pair, func, keys, initialisation_vector)
    result_str += chr(l_result) + chr(r_result)

    initialisation_vector = [pair[0], pair[1]]

print(result_str)