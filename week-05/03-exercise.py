# 2. Feistel cipher key is ['?', '?']
# Iteration function: (m|k)^((m//16)&k)
# Cipher: [[237, 152], [243, 157], [241, 159], [227, 145], [248, 137], [225, 147], [236, 143], [232, 128], [237, 148], [239, 137], [246, 130], [244, 133], [241, 152], [233, 137], [248, 130], [240, 136], [239, 155], [241, 152], [235, 143], [248, 130], [249, 153], [243, 152], [226, 147], [249, 152], [239, 137], [246, 130], [244, 133], [240, 128], [237, 136], [241, 138], [225, 147], [246, 135], [248, 137], [250, 130], [241, 152], [245, 152], [252, 138], [253, 130], [252, 132], [233, 136], [255, 138], [224, 147], [246, 137], [241, 159], [248, 128], [249, 157], [247, 130], [247, 153], [246, 143], [229, 145], [243, 153], [246, 130], [230, 145], [246, 130], [244, 133], [255, 152], [236, 159], [233, 155], [224, 147], [238, 157], [224, 155], [236, 143], [254, 143], [248, 130], [255, 159], [249, 152], [236, 142], [254, 130], [236, 143], [237, 159], [240, 129], [242, 134], [246, 143], [242, 133], [254, 143], [243, 157], [228, 149], [248, 130], [255, 159], [241, 152], [250, 153], [240, 129], [237, 143], [236, 143], [237, 152], [243, 157], [246, 134], [241, 159], [246, 134], [249, 152], [225, 147], [248, 128], [242, 138], [224, 147], [247, 153], [250, 143], [241, 152], [254, 143], [250, 153], [240, 129], [237, 143], [237, 159], [252, 133], [158, 190]]
# Text starts with "BU"

import utils.feistel_scheme as fs

byte_pairs = [[237, 152], [243, 157], [241, 159], [227, 145], [248, 137], [225, 147], [236, 143], [232, 128], [237, 148], [239, 137], [246, 130], [244, 133], [241, 152], [233, 137], [248, 130], [240, 136], [239, 155], [241, 152], [235, 143], [248, 130], [249, 153], [243, 152], [226, 147], [249, 152], [239, 137], [246, 130], [244, 133], [240, 128], [237, 136], [241, 138], [225, 147], [246, 135], [248, 137], [250, 130], [241, 152], [245, 152], [252, 138], [253, 130], [252, 132], [233, 136], [255, 138], [224, 147], [246, 137], [241, 159], [248, 128], [249, 157], [247, 130], [247, 153], [246, 143], [229, 145], [243, 153], [246, 130], [230, 145], [246, 130], [244, 133], [255, 152], [236, 159], [233, 155], [224, 147], [238, 157], [224, 155], [236, 143], [254, 143], [248, 130], [255, 159], [249, 152], [236, 142], [254, 130], [236, 143], [237, 159], [240, 129], [242, 134], [246, 143], [242, 133], [254, 143], [243, 157], [228, 149], [248, 130], [255, 159], [241, 152], [250, 153], [240, 129], [237, 143], [236, 143], [237, 152], [243, 157], [246, 134], [241, 159], [246, 134], [249, 152], [225, 147], [248, 128], [242, 138], [224, 147], [247, 153], [250, 143], [241, 152], [254, 143], [250, 153], [240, 129], [237, 143], [237, 159], [252, 133], [158, 190]]
func = "(r | key) ^ ((r//16) & key)"

for first_key in range(0, 200):
    for second_key in range(0, 200):
        temp_keys  = [first_key, second_key]

        result_str = ""
        for pair in byte_pairs:
            l_result, r_result = fs.decrypt_ebc(pair, func, temp_keys)
            result_str += chr(l_result) + chr(r_result)

        if result_str.startswith("BU"):
            print(f"key: {temp_keys}, {result_str}")