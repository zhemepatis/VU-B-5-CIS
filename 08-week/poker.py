'''
ASTUOTAKUKABARAIKABARAIAUKSTYNJDANGUZIURIUOGIANTDEBESUKARVESGANOSI
I šifras 
[120, 123, 130, 244, 140, 116, 104, 209, 39, 26, 236, 1, 199, 18, 18, 125, 175, 226, 24, 198, 94, 193, 239, 40, 156, 13, 230, 90, 64, 79, 6, 151, 211, 195, 45, 73, 104, 75, 204, 245, 108, 79, 155, 127, 45, 68, 125, 26, 14, 112, 234, 53, 155, 95, 45, 221, 198, 61, 21, 178, 215, 85, 131, 118, 123, 159]
II šifras 
[90, 165, 220, 12, 29, 44, 118, 122, 130, 166, 81, 240, 229, 162, 47, 42, 228, 155, 99, 36, 27, 161, 149, 134, 10, 255, 17, 158, 202, 143, 243, 202, 254, 38, 194, 192, 125, 202, 38, 79, 55, 132, 68, 109, 6, 71, 168, 110, 185, 231, 84, 17, 205, 88, 135, 52, 169, 18, 105, 250, 123, 90, 214, 164, 165, 193]
'''

# Skaičiaus vertimas bitų eilute
getBin = lambda x, n: x >= 0 and str(bin(x))[2:].zfill(n) or "-" + str(bin(x))[3:].zfill(n)
getBin(1,8)

# Chi-kvadrat su m laisvės laipsnių p- reikšmė


# Standartinio normaliojo dėsnio p reikšmė
N= RealDistribution('gaussian', 1)
t=2.5
p=1-N.cum_distribution_function(t)
p

# pasidarom srautus
txt='ASTUOTAKUKABARAIKABARAIAUKSTYNJDANGUZIURIUOGIANTDEBESUKARVESGANOSI'
sf1 = [120, 123, 130, 244, 140, 116, 104, 209, 39, 26, 236, 1, 199, 18, 18, 125, 175, 226, 24, 198, 94, 193, 239, 40, 156, 13, 230, 90, 64, 79, 6, 151, 211, 195, 45, 73, 104, 75, 204, 245, 108, 79, 155, 127, 45, 68, 125, 26, 14, 112, 234, 53, 155, 95, 45, 221, 198, 61, 21, 178, 215, 85, 131, 118, 123, 159]

b1 =''
for r in txt:
    b1 += bin(ord(r))[2::]
    
b1 = '10100111010100101010110011111010100100000110010111010101100101110000011000010100000110100101000001100100110010111000001100001010000011010010100000110010011000001101010110010111010011101010010110011001110100101010001001000001100111010001111010101101101010010011010101101001010010011010101100111110001111001001100000110011101010100100010010001011000010100010110100111010101100101110000011010010101011010001011010011100011110000011001110100111110100111001001'

b2 = ''
for r in sf1:
    b2 += bin(r)[2::]
b2 = '1111000111101110000010111101001000110011101001101000110100011001111101011101100111000111100101001011111011010111111100010110001100011010111101100000111101111101000100111001101111001101011010100000010011111101001011111010011110000111011011001001110100010010111100110011110101110110010011111001101111111111011011000100111110111010111011100001110101011010110011011101111110110111011101110001101111011010110110010110101111010101100000111110110111101110011111'

# darom testus
# pokerio testas, kai m = 3
m = 3
N = [0, 0, 0, 0, 0, 0, 0, 0]
k = len(b2)//m
al = 0.1

for i in range(k):
    j = int(b2[m*i:m*(i+1)], 2)
    N[j] += 1
    
T3 = 8.*sum([n*n for n in N])/k-k
l=7
T = RealDistribution('chisquared', l)
p=1-T.cum_distribution_function(T3)

print(T3, p)

# atsakymas pokerio testas = p
# neatsitiktine seka, nes p < 0.1