# 2. Feistel cipher key is ['?', 76]
# Iteration function: (m|k)^((k//16)&m)
# Cipher: [[16, 29], [11, 26], [13, 4], [7, 15], [12, 21], [30, 27], [20, 30], [1, 14], [16, 24], [20, 23], [9, 4], [23, 28], [22, 19], [27, 26], [12, 20], [28, 28], [12, 18], [12, 21], [23, 20], [31, 30], [22, 19], [9, 4], [1, 12], [30, 30], [28, 28], [8, 23], [27, 26], [12, 20], [28, 28], [12, 18], [12, 21], [9, 4], [17, 28], [25, 16], [6, 12], [16, 30], [18, 20], [8, 18], [16, 24], [22, 19], [9, 4], [1, 12], [30, 30], [12, 18], [17, 28], [25, 16], [6, 12], [24, 21], [1, 12], [25, 20], [15, 2], [24, 0], [28, 20], [12, 18], [17, 28], [25, 16], [6, 12], [16, 30], [18, 20], [8, 23], [14, 24], [4, 6], [28, 25], [5, 8], [17, 19], [28, 23], [15, 2], [7, 2], [12, 21], [6, 11], [10, 29], [20, 20], [22, 21], [7, 10], [8, 16], [20, 21], [72, 100]]

import utils.feistel_scheme as fs

keys = [76]
byte_pairs = [[16, 29], [11, 26], [13, 4], [7, 15], [12, 21], [30, 27], [20, 30], [1, 14], [16, 24], [20, 23], [9, 4], [23, 28], [22, 19], [27, 26], [12, 20], [28, 28], [12, 18], [12, 21], [23, 20], [31, 30], [22, 19], [9, 4], [1, 12], [30, 30], [28, 28], [8, 23], [27, 26], [12, 20], [28, 28], [12, 18], [12, 21], [9, 4], [17, 28], [25, 16], [6, 12], [16, 30], [18, 20], [8, 18], [16, 24], [22, 19], [9, 4], [1, 12], [30, 30], [12, 18], [17, 28], [25, 16], [6, 12], [24, 21], [1, 12], [25, 20], [15, 2], [24, 0], [28, 20], [12, 18], [17, 28], [25, 16], [6, 12], [16, 30], [18, 20], [8, 23], [14, 24], [4, 6], [28, 25], [5, 8], [17, 19], [28, 23], [15, 2], [7, 2], [12, 21], [6, 11], [10, 29], [20, 20], [22, 21], [7, 10], [8, 16], [20, 21], [72, 100]] 
func = "(r | key) ^ ((key // 16) & r)"

for first_key in range(0, 100):
    temp_keys  = [first_key]
    temp_keys.extend(keys)

    result_str = ""
    for pair in byte_pairs:
        l_result, r_result = fs.decrypt_ebc(pair, func, temp_keys)
        result_str += chr(l_result) + chr(r_result)

    print(f"key: {first_key}, {result_str}")